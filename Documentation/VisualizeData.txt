VISUALIZE DATA
GOALS
	I. Process .xlsx with KPI (key performance indicators), populating table and allowing sorting value sets ascending/descending. Also display mean and mode.
	II. Implement own sorting algorithm.
	III. Display KPI as graphs.

A. EXTERNAL ASSETS 
	I. read-excel-file
		a. https://www.npmjs.com/package/read-excel-file#cdn
		b. follow documentation to parse input type="file" in async function. readXlsx(sourcefile.files[0]).then(function(rows) {KPIparsed = rows;})
		c. Output format: array = [rows[columns]]
		
	II. Plotly.js or Chart.js
		a. https://www.w3schools.com/ai/ai_plotly.asp or https://www.w3schools.com/ai/ai_chartjs.asp
		
B. VISUALIZE DATA
	I. Variables
		a. KPIparsed
			Array (columns) of arrays (rows). Derived from KPIExcelParse()
		b. keysArray
			Array of headers, removed from KPIparsed.
		
	II. Functions
		a. KPIExcelParse()
			See read-excel-file external asset for formatting. async, await .xlsx file uploaded in html input type="file" field. Set keysArray = KPIparsed[0] and shift it out of KPIparsed to simplify sorting. Calls createSortOptions() and createKPITable()
		b. createSortOptions()
			in html select fields for x-axis and y-axis, append options with .textContent and .value. Loop keysArray.length, and keysArray[i] for option content.
			1. sortAppends(idName) internal function. Used twice to append as described.
		c. createKPITable()
			in html table element, reset and createTHead(), insertRow(0 and 1) for keysArray row and for mean/median row. Loop keysArray.length, twoRows.insertCell(i), .innerHTML to keysArray[i] and calcMeanMedian(i) respectively.
			Then loop of KPIparsed.length, starting insertRow(i+2) to not overwrite headers. Inner loop keysArray.length, to populate each cell. insertCell(j), .innerHTML = KPIparsed[i][j].
		d. calcMeanMedian(index)
			creates a temporary array of KPIparsed[i] values (i.e. one column), sorts them, then calculates the median and mean; first by selection middle value (mean of middle two, if even), then summing all values and dividing by array length.
		e. sortBy()
			checks html x-axis value for options from createSortOptions. Calls sortFunction(keysArray.indexOf(selectedOption)), repopulateTable(), and simplePlotDisplay()
		f. sortFunction(arrayToSort, sortIndex)
			See C. SORTING ALGORITHM
		g. repopulateTable()
			the newly sorted KPIparsed is run through two loops, table.rows[i+2].cells[j].innerHTML = KPIparsed[i][j]. i+2 to not overwrite header contents.
		h. simplePlotDisplay()
			see D. GRAPHING

	III. Significant HTML elements
		a. input type="file" oninput="KPIExcelParse()"
		b. table id="KPITable", empty. Table rows/cells created in createKPITable()
		c. <select> tags, for x-axis, asc/desc, y-axis, graphType. Options for x/y-axis appended in createSortOptions()
		d. canvas in div, for graphing.

C. SORTING ALGORITHM
	The built-in array.sort() method is undesired.
	I. sortFunction(arrayToSort, sortIndex)
		a. We call the arrayToSort (here KPIparsed), along with the sortIndex (here keysArray.indexOf(selectedOption)).
	
	II. Nested for-loop sort (Bubble sort)
		a. Outer loop runs along entire length of array. i++
		b. Inner loop runs along entire length of array, except already sorted i. j++
		c. arrayToSort[i][sortIndex] compared [j][sortIndex]. If yes,
		d. exchange arrayToSort[i] and [j], with temp var. Each full outer loop cycle pushes one value in desired order.
		e. Note no [sortIndex] during exchange. Actual array contents must not be altered, only order.

D. GRAPHING
	I. Variables
		a. xTemp, yTemp, 
			Because of inconsistent data sets requested from different graphs, start by importing index only of selected sort options
	
	II. data set retrieval
		a. KPIparsed[i][xTemp] and [yTemp] are pushed into xAxis and yAxis sets, depending on graph type.

	III. Notes
		a. <canvas> is pre-set in html. On each function call, querySelector clear innerHTML of canvas to prevent graph elements layering.
		b. Consult documentation of A.II.